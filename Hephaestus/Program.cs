// Hephaestus.cs
// A mutagen synthesis patcher that randomizes the height of all human COBJs in a deterministic manner
// The patcher can be configured with a minimum and maximum value for each race and gender of that race

using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace Hephaestus
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        static public Settings settings => _settings.Value;
        public static async Task<int> Main(string[] args)
        {

            // Run the patcher
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Hephaestus.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }

        // A method to run the patch on a given load order
        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {

            Console.WriteLine("");
            Console.WriteLine("=================================================");
            Console.WriteLine("Starting COBJ Patching...");
            Console.WriteLine("=================================================");
            Console.WriteLine("");

            // **Main Mechanic**

            // 4. We set this book item to be required for the COBJ so the player needs the schematic/recipe on them to have the option;
            // 5. We make a leveled list A for each item with an 90% chance to not drop anything, and another one B with a 50% chance to not drop anything;
            // 6. We look for instances of the OG item in leveled lists and inject the leveled list A from the last step in, if it's anything but a merchant, and B if it's a merchant (without removing the entry for the og item);
            // 7. We patch the blacksmithing intro quest to give you the relevant schematics with the materials.

            // Loop through all the COBJ records in the load order
            foreach (IConstructibleObjectGetter cobj in state.LoadOrder.PriorityOrder.ConstructibleObject().WinningOverrides())
            {

                if (!cobj.CreatedObject.TryResolve(state.LinkCache, out var createdItem)) continue;
                if (createdItem is not INamedGetter namedObj || createdItem is not IWeightValueGetter weightValue) continue;
                if (cobj.Items is null) continue;

                // Deterministic seed
                var seed = cobj.FormKey.ID.GetHashCode();
                var random = new Random(seed);

                // Base Scroll
                var schematicBase = Skyrim.Scroll.EbonyFleshScroll.TryResolve(state.LinkCache);
                var objModel = schematicBase?.Model?.DeepCopy() ?? new Model();
                var objInvArt = schematicBase?.MenuDisplayObject.TryResolve(state.LinkCache);
                var objBounds = schematicBase?.ObjectBounds?.DeepCopy() ?? new ObjectBounds();

                // Base Object
                string? objName = namedObj.Name;
                string? objType = string.Empty;
                string? objEditorID = createdItem.EditorID;
                uint objValue = weightValue.Value;

                // Base Flavour
                string? objBench;
                string? processName;
                string? schematicType = "Schematic";
                string? requiredItems = string.Empty;
                var aAn = "a";
                char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };
                if (objName?.IndexOfAny(vowels) == 0) aAn = "an";

                // Set values based on bench
                if (cobj.WorkbenchKeyword.FormKey == Skyrim.Keyword.CraftingSmithingForge.FormKey)
                {
                    objBench = "Forge";
                    processName = "forging";

                    _ = createdItem switch
                    {
                        IWeaponGetter => objType = "Weapon",
                        IArmorGetter => objType = "Armor",
                        _ => objType = "Misc"
                    };

                    if (createdItem is IArmorGetter armorObj)
                    {
                        var flagToCheck = armorObj.BodyTemplate;
                        if (flagToCheck == null) continue;
                        else if (flagToCheck.FirstPersonFlags.HasFlag(BipedObjectFlag.Hands) || flagToCheck.FirstPersonFlags.HasFlag(BipedObjectFlag.Feet))
                        {
                            aAn = "a pair of";
                        }
                        
                        else if (flagToCheck.FirstPersonFlags.HasFlag(BipedObjectFlag.Circlet) || flagToCheck.FirstPersonFlags.HasFlag(BipedObjectFlag.Ring))
                        {
                            objType = "Jewelry";
                        }

                        if (armorObj.EquipmentType.FormKey == Skyrim.EquipType.Shield.FormKey)
                        {
                            objType = "Shield";
                        }
                    }
                }
                else if (cobj.WorkbenchKeyword.FormKey == Skyrim.Keyword.CraftingTanningRack.FormKey)
                {
                    objBench = "Tanning Rack";
                    processName = "tanning";
                    objType = "Misc";
                }
                else if (cobj.WorkbenchKeyword.FormKey == Skyrim.Keyword.CraftingCookpot.FormKey)
                {
                    objBench = "cooking pot";
                    schematicType = "Recipe";
                    processName = "cooking";

                    _ = createdItem switch
                    {
                        IIngredientGetter => objType = "Ingredient",
                        _ => objType = "Food"
                    };
                }
                else continue;

                // Building the flavour text
                string[] flavourText = {
                    $"looks like the notes of a madman, though I can somewhat decypher it. It seems to detail the process of",
                    $"seems to have been teared off from someone's journal. It seems to explain the process of",
                    $"seems to have been written by an apprentice, from the looks of it it describes the process of",
                    $"goes into great detail on the steps of",
                    $"contains the secrets to",
                    $"is filled with scribbles and notes on the steps of",
                    $"still has some stains of blood on it, it describes the process of"
                    };
                    
                foreach (var reqItem in cobj.Items)
                {
                    if (!reqItem.Item.Item.TryResolve(state.LinkCache, out var reqItemObj)) continue;
                    if (reqItemObj is not INamedGetter namedItem) continue;
                    requiredItems += $"{namedItem?.Name}\n";
                };
                
                var bookTextTemplate = $"{objName} {schematicType}\n\nMaterials needed:\n{requiredItems}\nThis {schematicType.ToLower()} {flavourText[random.Next(flavourText.Length)]} {processName} {aAn} {objName} at a {objBench}. I better not lose this.";


                // Create a new book record
                var book = state.PatchMod.Books.AddNew(cobj.EditorID);

                // Set the book properties
                book.EditorID = $"{objEditorID}_{schematicType}";
                book.Name = $"{objType} {schematicType}: {objName}";
                book.Value = objValue * 5;
                book.Weight = 0.1f;
                book.Model = objModel;
                // book.InventoryArt = objInvArt;
                book.ObjectBounds = objBounds;
                book.BookText = bookTextTemplate;
                book.Type = Book.BookType.NoteOrScroll;

                Console.WriteLine($"{objType} {schematicType}: {objName}");
                Console.WriteLine(bookTextTemplate);
                Console.WriteLine("");
                Console.WriteLine("=================================================");
                Console.WriteLine("");

                // Create a new COBJ record with the modified height and add it to the output mod
                var modifiedCobj = state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(cobj);
                var newCond = new GetItemCountConditionData();
                newCond.ItemOrList = new FormLinkOrIndex<IItemOrListGetter>(newCond, book.FormKey);
                newCond.ItemOrList.Link.SetTo(book);
                newCond.RunOnType = Condition.RunOnType.Subject;

                modifiedCobj.Conditions.Add(new ConditionFloat()
                {
                    ComparisonValue = 1,
                    CompareOperator = CompareOperator.GreaterThanOrEqualTo,
                    Data = newCond


                });
            }

            Console.WriteLine("");
            Console.WriteLine("=================================================");
        }
    }
}