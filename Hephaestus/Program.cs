using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace Hephaestus
{
    // **To Do**
    // Add item blacklist?
    // Add additional text in the book if the item cobj has other conditions for crafting
    // Move bench types to customization

    public class Program
    {
        static Lazy<Settings> _settings = null!;
        public static Settings settings => _settings.Value;

        public static async Task<int> Main(string[] args)
        {
            // Run the patcher
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "Hephaestus.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .Run(args);
        }

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Declare base vars and dictionaries
            char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U' };
            Dictionary<FormKey, List<FormKey>> itemCOBJs = new();
            Dictionary<FormKey, List<FormKey>> itemLVLIs = new();
            Dictionary<FormKey, FormKey> itemBOOK = new();
            Dictionary<FormKey, FormKey> itemBOOKFragment = new();
            Dictionary<FormKey, Dictionary<String, FormKey>> bookLVLIs = new();

            var bookModelLib = new Dictionary<FormKey, Model>()
            {
                {
                    Skyrim.Static.HighPolyJournal.FormKey,
                    new Model() { File = "Clutter/Books/JournalLowPoly01.nif" }
                },
                {
                    Skyrim.Static.HighPolyJournal02.FormKey,
                    new Model() { File = "Clutter/Books/JournalLowPoly02.nif" }
                },
                {
                    Skyrim.Static.HighPolyJournal03.FormKey,
                    new Model() { File = "Clutter/Books/JournalLowPoly03.nif" }
                }
            };

            var bookFragmentModelLib = new Dictionary<FormKey, Model>()
            {
                {
                    Skyrim.Static.HighPolyNote.FormKey,
                    new Model() { File = "Clutter/Books/Note.nif" }
                },
                {
                    Skyrim.Static.HighPolyNote02.FormKey,
                    new Model() { File = "Clutter/Books/Note02.nif" }
                },
                {
                    Skyrim.Static.HighPolyNote03.FormKey,
                    new Model() { File = "Clutter/Books/Note03.nif" }
                },
                {
                    Skyrim.Static.HighPolyNote04.FormKey,
                    new Model() { File = "Clutter/Books/Note04.nif" }
                }
            };

            Console.WriteLine(String.Empty);
            Console.WriteLine("=================================================");
            Console.WriteLine("Building cache ...");
            Console.WriteLine("=================================================");
            Console.WriteLine(String.Empty);

            // Enumerate through COBJs and save the data for later for the items that have names and values, for which the COBJ has a whitelisted keyword and which are present in at least one leveled list
            foreach (
                IConstructibleObjectGetter baseCOBJ in state.LoadOrder.PriorityOrder
                    .ConstructibleObject()
                    .WinningOverrides()
            )
            {
                // Sanity checks to skip unnecessary processing
                if (
                    baseCOBJ.Items == null
                    || !settings.BenchSettings.Any(
                        e => e.BenchKeyword.FormKey == baseCOBJ.WorkbenchKeyword.FormKey
                    )
                    || !baseCOBJ.CreatedObject.TryResolve(state.LinkCache, out var createdItem)
                )
                    continue;

                if (createdItem is not IWeightValueGetter && createdItem is not IWeaponGetter)
                    continue;

                // Check if there are any LVLIs that this item is present in
                foreach (
                    var baseLVLI in state.LoadOrder.PriorityOrder.LeveledItem().WinningOverrides()
                )
                {
                    if (baseLVLI.Entries == null)
                        continue;
                    if (baseLVLI.Entries.Any(e => e.Data?.Reference.FormKey == createdItem.FormKey))
                    {
                        if (!itemLVLIs.ContainsKey(createdItem.FormKey))
                            itemLVLIs.Add(createdItem.FormKey, new List<FormKey>());

                        if (!itemLVLIs[createdItem.FormKey].Contains(baseLVLI.FormKey))
                            itemLVLIs[createdItem.FormKey].Add(baseLVLI.FormKey);
                    }
                }

                // if no relevant LVLIs, skip item early
                if (!itemLVLIs.ContainsKey(createdItem.FormKey))
                    continue;

                // add COBJ now since it's already passed the LVLI check
                if (!itemCOBJs.ContainsKey(createdItem.FormKey))
                    itemCOBJs.Add(createdItem.FormKey, new List<FormKey>());
                itemCOBJs[createdItem.FormKey].Add(baseCOBJ.FormKey);
            }

            Console.WriteLine(String.Empty);
            Console.WriteLine("=================================================");
            Console.WriteLine("Assigning item types and prepping things ...");
            Console.WriteLine("=================================================");
            Console.WriteLine(String.Empty);

            foreach (var createdItemFormKey in itemCOBJs.Keys)
            {
                // Pull created item
                if (
                    !state.LinkCache.TryResolve<IItemGetter>(
                        createdItemFormKey,
                        out var createdItem
                    ) || createdItem is not INamedGetter createdItemName
                )
                    continue;

                if (settings.ShowDebugLogs)
                {
                    Console.WriteLine(String.Empty);
                    Console.WriteLine("=================================================");
                    Console.WriteLine(String.Empty);
                    Console.WriteLine($"Found {createdItemName.Name} ...");
                }
                else
                    Console.WriteLine($"Patching for {createdItemName.Name} ...");

                // Deterministic seed
                var random = new Random(createdItem.FormKey.ID.GetHashCode());

                // Base Object
                string? objName = createdItemName.Name;
                string? objEditorID = createdItem.EditorID;
                uint objValue;
                string? objType = "Misc";

                if (createdItem is IWeightValueGetter createdItemValue)
                    objValue = createdItemValue.Value;
                else if (createdItem is IWeaponGetter createdWeapon)
                    objValue = createdWeapon.BasicStats?.Value ?? 10;
                else
                    continue;

                // Book variables
                Book book;
                Book bookFragment;

                // Randomize book model
                var bookModelSetKey = bookModelLib.Keys.ElementAt(
                    (int)Math.Round((bookModelLib.Count - 1) * (float)random.NextDouble())
                );
                if (!state.LinkCache.TryResolve<IStaticGetter>(bookModelSetKey, out var bookStatic))
                    continue;

                // Randomize fragment model
                var bookFragmentModelSetKey = bookFragmentModelLib.Keys.ElementAt(
                    (int)Math.Round((bookFragmentModelLib.Count - 1) * (float)random.NextDouble())
                );
                if (
                    !state.LinkCache.TryResolve<IStaticGetter>(
                        bookFragmentModelSetKey,
                        out var bookFragmentStatic
                    )
                )
                    continue;

                // Initialize other
                string? objBench = "Forge";
                string? processName = "crafting";
                string schematicType = "Schematic";
                string? requiredItems = String.Empty;
                string? aAn;
                if (objName?.IndexOfAny(vowels) == 0)
                    aAn = "an";
                else
                    aAn = "a";

                // Assigning item types
                switch (createdItem)
                {
                    case IWeaponGetter:
                        objType = "Weapon";
                        break;
                    case IIngestibleGetter:
                        objType = "Cooking";
                        break;
                    case IArmorGetter armorObj:
                        var flagToCheck = armorObj.BodyTemplate;
                        if (flagToCheck == null)
                            continue;
                        switch (flagToCheck.FirstPersonFlags)
                        {
                            case BipedObjectFlag.Hands
                            or BipedObjectFlag.Feet:
                                aAn = "a pair of";
                                break;
                            case BipedObjectFlag.Amulet
                            or BipedObjectFlag.Ring:
                                objType = "Jewelry";
                                break;
                            default:
                                objType = "Armor";
                                break;
                        }
                        if (armorObj.EquipmentType.FormKey == Skyrim.EquipType.Shield.FormKey)
                        {
                            objType = "Shield";
                        }
                        break;
                }
                if (settings.ShowDebugLogs)
                {
                    Console.WriteLine(String.Empty);
                    Console.WriteLine($"Creating {objName} schematics and patching COBJs ...");
                    Console.WriteLine(String.Empty);
                }

                foreach (FormKey cobjFormKey in itemCOBJs[createdItemFormKey])
                {
                    // Define COBJ
                    if (
                        !state.LinkCache.TryResolve<IConstructibleObjectGetter>(
                            cobjFormKey,
                            out var cobj
                        )
                    )
                        continue;

                    Console.WriteLine(
                        settings.BenchSettings.FindIndex(
                            e => e.BenchKeyword.FormKey == cobj.WorkbenchKeyword.FormKey
                        )
                    );
                    // Set values based on bench
                    var curBenchSettings = settings.BenchSettings[
                        settings.BenchSettings.FindIndex(
                            e => e.BenchKeyword.FormKey == cobj.WorkbenchKeyword.FormKey
                        )
                    ];
                    objBench = curBenchSettings.objBenchName ?? "crafting bench";
                    processName = curBenchSettings.processName ?? "crafting";
                    schematicType = curBenchSettings.schematicTypeName ?? "Schematic";

                    if (cobj.Items == null)
                        continue;
                    foreach (var reqItem in cobj.Items)
                    {
                        if (!reqItem.Item.Item.TryResolve(state.LinkCache, out var reqItemObj))
                            continue;
                        if (reqItemObj is not INamedGetter namedItem)
                            continue;
                        requiredItems += $"{namedItem.Name}\n";
                    }
                    ;

                    // Building the flavour text
                    if (!itemBOOK.ContainsKey(createdItem.FormKey))
                    {
                        // Define how many times an item needs to be broken down
                        int min = 5;
                        int max = 10;
                        uint noteToSchematicRatio = (uint)
                            Math.Max(Math.Round(min + (max - min) * (float)random.NextDouble()), 1);

                        // create a new book
                        book = state.PatchMod.Books.AddNew(objEditorID);

                        // Set the book properties
                        book.EditorID = $"{objEditorID}_{schematicType}";
                        book.Name = $"{objType} {schematicType}: {objName}";
                        book.Description =
                            $"A {schematicType.ToLower()} that provides guidance on crafting {aAn} {objName}. Without this, I won't be able to remember how to to do so anymore.";
                        book.Value = objValue * noteToSchematicRatio;
                        book.Weight = 0.25f;
                        book.Model = bookModelLib[bookModelSetKey];
                        book.InventoryArt = new FormLinkNullable<IStaticGetter>(bookStatic);
                        book.ObjectBounds = bookStatic.ObjectBounds.DeepCopy();
                        book.Type = Book.BookType.BookOrTome;
                        book.PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>(
                            Skyrim.SoundDescriptor.ITMNoteUp.FormKey
                        );
                        book.Keywords = new Noggog.ExtendedList<IFormLinkGetter<IKeywordGetter>>();
                        book.Keywords.Add(Skyrim.Keyword.VendorItemRecipe);

                        // Formatting book contents
                        List<string> flavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} looks like the notes of a madman, though I can somewhat decypher it. It seems to detail the process of {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} seems to have been teared off from someone's journal. It seems to explain the process of {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} goes into great detail on the steps of {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} contains the secrets to {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} is filled with scribbles and notes on the steps of {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} still has some stains of blood on it, it describes the process of {processName}ing {aAn} {objName} at a {objBench}."
                            };

                        // Formatting book contents
                        List<string> ArmorflavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} seems to have been written by a smith apprentice, from the looks of it it describes the process of {processName}ing {aAn} {objName} at a {objBench}.",
                                $"This {schematicType.ToLower()} is a sketch, it seems to have been drawn by a designer. It shows the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the style and the flair of this piece of armor, I wonder how it looks.",
                                $"This {schematicType.ToLower()} is a diary, it seems to have been written by a traveler. It narrates the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the experience and the wisdom of this piece of armor, I wonder what it has seen.",
                                $"This {schematicType.ToLower()} is a prayer, it seems to have been uttered by a priest. It blesses the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the faith and the grace of this piece of armor, I wonder what it protects.",
                                $"This {schematicType.ToLower()} is a sketch, it seems to have been drawn by a designer. It shows the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the style and the flair of this piece of armor, I wonder how it looks.",
                                $"To create {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. The {objName} is a rare piece of armor that can be found only in certain places. The {processName}ing method involves using special skills and tools to create a complex and unique design.",
                                $"This {schematicType.ToLower()} is a guide, it seems to have been written by a master. It instructs the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the skill and the expertise of this piece of armor, I wonder how it performs.",
                                $"This {schematicType.ToLower()} is written as a riddle. It puzzles the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the mystery and the enigma of this piece of armor, I wonder what it hides.",
                                $"This {schematicType.ToLower()} is a letter, it seems to have been sent by a friend. It shares the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the kindness and the generosity of this piece of armor, I wonder how it helps.",
                                $"This {schematicType.ToLower()} is made up of vivid illustrations, it seems to have been created by an artist. It depicts the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the color and the expression of this piece of armor, I wonder how it inspires.",
                            };

                        // Formatting book contents
                        List<string> WeaponflavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} is a rare find, it seems to belong to a famous craftsman. It reveals the secrets of {processName}ing {aAn} {objName} at a {objBench}. I can see the intricate details and the careful instructions that go into making such a masterpiece.",
                                $"This {schematicType.ToLower()} is a bit hard to read, it looks like it was written in a hurry. It shows the basics of {processName}ing {aAn} {objName} at a {objBench}. I can tell that the writer was not very experienced or skilled, but they managed to create something useful.",
                                $"This {schematicType.ToLower()} is a curious piece of paper, it seems to have some strange symbols and diagrams on it. It describes the process of {processName}ing {aAn} {objName} at a {objBench}. I can sense some magic and mystery behind this weapon, I wonder what it can do.",
                                $"This {schematicType.ToLower()} is a valuable document, it seems to have been stolen from a royal vault. It explains the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the quality and the elegance of this weapon, I bet it belongs to someone important.",
                                $"This {schematicType.ToLower()} is a worn-out parchment, it seems to have been passed down for generations. It tells the story of {processName}ing {aAn} {objName} at a {objBench}. I can feel the history and the legacy of this weapon, I wonder who wielded it before me.",
                                $"This {schematicType.ToLower()} is a fresh piece of paper, it seems to have been written by someone who just learned the craft. It outlines the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the enthusiasm and the creativity of this weapon, I hope it works as intended.",
                                $"This {schematicType.ToLower()} is a colorful drawing, it seems to have been made by a child. It illustrates the process of {processName}ing {aAn} {objName} at a {objBench}. I can see the imagination and the fun of this weapon, I wonder what inspired it.",
                                $"This {schematicType.ToLower()} is a bloody mess, it seems to have been used as a weapon itself. It depicts the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the violence and the madness of this weapon, I hope it was worth it.",
                                $"This {schematicType.ToLower()} is a faded scroll, it seems to have been hidden for a long time. It reveals the secrets of {processName}ing {aAn} {objName} at a {objBench}. I can see the wisdom and the knowledge of this weapon, I wonder what secrets it holds.",
                                $"This {schematicType.ToLower()} is a neat printout, it seems to have been made by a professional. It shows the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the precision and the efficiency of this weapon, I admire the skill behind it.",
                                $"This {schematicType.ToLower()} is a torn page, it seems to have been ripped from a book. It explains the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the complexity and the diversity of this weapon, I wonder how it works.",
                                $"This {schematicType.ToLower()} is a handwritten note, it seems to have been left by a friend. It outlines the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the friendship and the care of this weapon, I appreciate the gesture.",
                                $"This {schematicType.ToLower()} is a coded message, it seems to have been written by a spy. It conceals the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the stealth and the cunning of this weapon, I wonder who it was written for.",
                                $"This {schematicType.ToLower()} is a burnt paper, it seems to have been salvaged from a fire. It preserves the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the damage and the danger of this weapon, I hope it is not too late.",
                                $"This {schematicType.ToLower()} is a dirty rag, it seems to have been used as a wipe. It stains the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the dirt and the grime of this weapon, I hope it is still usable.",
                                $"This {schematicType.ToLower()} is a golden plaque, it seems to have been awarded by a king. It honors the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the glory and the honor of this weapon, I wonder who earned it.",
                                $"This {schematicType.ToLower()} is a crumpled paper, it seems to have been thrown away. It discards the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the failure and the frustration of this weapon, I wonder what went wrong.",
                                $"This {schematicType.ToLower()} is a musical sheet, it seems to have been composed by a bard. It sings the steps of {processName}ing {aAn} {objName} at a {objBench}. I can hear the melody and the rhythm of this weapon, I wonder how it sounds.",
                                $"This {schematicType.ToLower()} is a map, it seems to have been drawn by an explorer. It marks the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the adventure and the discovery of this weapon, I wonder where it leads.",
                                $"This {schematicType.ToLower()} is a puzzle, it seems to have been made by a genius. It challenges the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the difficulty and the fun of this weapon, I wonder if I can solve it.",
                                $"This {schematicType.ToLower()} is a poem, it seems to have been written by a lover. It praises the steps of {processName}ing {aAn} {objName} at a {objBench}. I can feel the emotion and the beauty of this weapon, I wonder who it is for.",
                                $"This {schematicType.ToLower()} is a prophecy, it seems to have been spoken by a seer. It foretells the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the fate and the destiny of this weapon, I wonder what it means.",
                                $"This {schematicType.ToLower()} is a joke, it seems to have been told by a jester. It mocks the steps of {processName}ing {aAn} {objName} at a {objBench}. I can see the humor and the irony of this weapon, I wonder if it is funny."
                            };

                        // Formatting book contents
                        List<string> ShieldflavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} reveals the secrets and arts of the craft, explaining the advanced steps to craft {aAn} {objName} using a {objBench}. This shield is a legendary item, only the worthy can obtain it. It requires mastering the {processName}ing technique to create an extraordinary and powerful design.",
                                $"A soldier must have written this {schematicType.ToLower()}, it states the steps of {processName}ing {aAn} {objName} at a {objBench} with duty and loyalty. I wonder who this shield serves, it must be very reliable.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to make {aAn} {objName}. This shield is a common item, it can be used for various purposes. I will need to work with the available materials to create a simple and functional design, following the {processName}ing technique.",
                                $"A traveler must have written this {schematicType.ToLower()}, it narrates the steps of {processName}ing {aAn} {objName} at a {objBench} with experience and wisdom. I wonder what this shield has seen, it must have been through many adventures.",
                                $"A priest must have uttered this {schematicType.ToLower()}, it blesses the steps of {processName}ing {aAn} {objName} at a {objBench} with faith and grace. I wonder what this shield protects, it must be very sacred.",
                                $"A Companion must have made this {schematicType.ToLower()}, it urges the steps of {processName}ing {aAn} {objName} at a {objBench} with courage. I wonder how this shield fights, it must be very brave.",
                                $"A artist must have created this {schematicType.ToLower()}, it depicts the steps of {processName}ing {aAn} {objName} at a {objBench} with color and expression. I wonder how this shield inspires, it must be very beautiful.",
                                $"A collector must have made this {schematicType.ToLower()}, it records the steps of {processName}ing {aAn} {objName} at a {objBench} with rarity and value. I wonder how this shield shines, it must be very precious.",
                                $"A witch must have written this {schematicType.ToLower()}, it twists the steps of {processName}ing {aAn} {objName} at a {objBench} with evil and malice. I wonder how this shield hurts, it must be very dangerous."
                            };

                        // Formatting book contents
                        List<string> CookingflavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} must've been taken out of a cookbook, it lists the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} looks delicious, it must be very tasty. I can smell the aroma and the flavor of this dish, I can't wait to try it.",
                                $"To prepare {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. This {objName} is a traditional dish, it has been passed down for generations. I will need to use fresh ingredients and follow the {processName}ing method to make it. I can feel the warmth and the comfort of this dish, it reminds me of home.",
                                $"This {schematicType.ToLower()} reveals the secrets of {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a exotic dish, it comes from a faraway land. I will need to master the skills and the tools to make it. I can see the spice and the zest of this dish, it makes me curious.",
                                $"Someone must have left this {schematicType.ToLower()} on a table for a long time, it's quite stained. It outlines the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} looks simple, but it has a hidden twist. I can taste the sweetness and the sourness of this dish, it surprises me.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to cook {aAn} {objName}. This {objName} is a healthy dish, it is good for Ir body and mind. I will need to use organic ingredients and follow the {processName}ing technique to make it. I can feel the energy and the vitality of this dish, it makes me happy.",
                                $"This {schematicType.ToLower()} teaches I how to {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a festive dish, it is perfect for celebrations and parties. I will need to use rich ingredients and follow the {processName}ing method to make it. I can hear the laughter and the joy of this dish, it makes me festive.",
                                $"To {processName}ing {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. This {objName} is a special dish, it is made with love and care. I will need to use quality ingredients and follow the {processName}ing technique to make it. I can feel the friendship and the generosity of this dish, it makes me grateful.",
                                $"This {schematicType.ToLower()} reveals the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a ancient dish, it has a long history and tradition. I will need to use rare ingredients and master the {processName}ing technique to make it. I can see the wisdom and the knowledge of this dish, it makes me curious.",
                                $"To {processName}ing {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. This {objName} is a mysterious dish, it has a secret ingredient and a hidden effect. I will need to use unknown ingredients and follow the {processName}ing method to make it. I can taste the mystery and the magic of this dish, it makes me adventurous.",
                                $"This {schematicType.ToLower()} tells I how to {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a personal dish, it is Ir own creation and invention. I will need to use Ir favorite ingredients and follow Ir own {processName}ing technique to make it. I can see the creativity and the expression of this dish, it makes me proud.",
                                $"This {schematicType.ToLower()} shows me how to {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a delicious dish, it is good for any occasion. I will need to use fresh ingredients and follow the {processName}ing method to make it. I can smell the aroma and the flavor of this dish, it makes me hungry.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to {processName}ing {aAn} {objName}. This {objName} is a traditional dish, it has been passed down for generations. I will need to use authentic ingredients and follow the {processName}ing technique to make it. I can feel the warmth and the comfort of this dish, it reminds me of home.",
                                $"This {schematicType.ToLower()} explains the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a exotic dish, it comes from a faraway land. I will need to master the skills and the tools to make it. I can see the spice and the zest of this dish, it makes me curious.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to cook {aAn} {objName}. This {objName} is a healthy dish, it is good for your body and mind. I will need to use organic ingredients and follow the {processName}ing technique to make it. I can feel the energy and the vitality of this dish, it makes me happy.",
                                $"This {schematicType.ToLower()} instructs me how to {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a festive dish, it is perfect for celebrations and parties. I will need to use rich ingredients and follow the {processName}ing method to make it. I can hear the laughter and the joy of this dish, it makes me festive.",
                            };

                        // Formatting book contents
                        List<string> JewelryflavourText =
                            new()
                            {
                                $"This {schematicType.ToLower()} shows me how to get started on {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a beautiful piece of jewelry, it is good for any occasion. I will need to use shiny materials and follow the {processName}ing method to make it. I can see the sparkle and the elegance of this piece, it makes me dazzled.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to get started on {processName}ing {aAn} {objName}. This {objName} is a rare piece of jewelry, it can only be found in certain places. I will need to use precious materials and follow the {processName}ing technique to make it. I can feel the value and the luxury of this piece, it makes me rich.",
                                $"This {schematicType.ToLower()} explains the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a magical piece of jewelry, it has a special power and effect. I will need to master the skills and the tools to make it. I can see the magic and the mystery of this piece, it makes me curious.",
                                $"This {schematicType.ToLower()} contains the instructions on {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a special piece of jewelry, it is made with love and care. I will need to use quality materials and follow the {processName}ing method to make it. I can feel the friendship and the generosity of this piece, it makes me grateful.",
                                $"This {schematicType.ToLower()} teaches me the way of {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a ancient piece of jewelry, it has a long history and tradition. I will need to use rare materials and master the {processName}ing technique to make it. I can see the wisdom and the knowledge of this piece, it makes me curious.",
                                $"To get started on {processName}ing {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. This {objName} is a exotic piece of jewelry, it comes from a faraway land. I will need to use unique materials and follow the {processName}ing method to make it. I can see the spice and the zest of this piece, it makes me adventurous.",
                                $"This {schematicType.ToLower()} reveals the secrets of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a legendary piece of jewelry, only the worthy can obtain it. I will need to use special materials and master the secrets and arts of the craft to make it. I can see the glory and the honor of this piece, it makes me proud.",
                                $"To craft {aAn} {objName}, I will need this {schematicType.ToLower()} and access to a {objBench}. This {objName} is a simple piece of jewelry, but it has a hidden twist. I will need to use common materials and follow the {processName}ing technique to make it. I can taste the sweetness and the sourness of this piece, it surprises me.",
                                $"This {schematicType.ToLower()} tells me the way of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a elegant piece of jewelry, it is perfect for celebrations and parties. I will need to use shiny materials and follow the {processName}ing method to make it. I can hear the laughter and the joy of this piece, it makes me festive.",
                                $"This {schematicType.ToLower()} shows me how to get started on {processName}ing {aAn} {objName} using a {objBench}. This {objName} is a colorful piece of jewelry, it is good for any occasion. I will need to use bright materials and follow the {processName}ing method to make it. I can see the sparkle and the flair of this piece, it makes me dazzled.",
                                $"I will need this {schematicType.ToLower()} and access to a {objBench} to {processName}ing {aAn} {objName}. This {objName} is a mysterious piece of jewelry, it has a secret ingredient and a hidden effect. I will need to use unknown materials and follow the {processName}ing technique to make it. I can taste the mystery and the magic of this piece, it makes me curious.",
                                $"This {schematicType.ToLower()} explains the steps of {processName}ing {aAn} {objName} at a {objBench}. This {objName} is a beautiful piece of jewelry, it is made with love and care. I will need to use quality materials and follow the {processName}ing method to make it. I can feel the friendship and the generosity of this piece, it makes me grateful.",
                            };

                        switch (objType)
                        {
                            case ("Armor"):
                                flavourText = flavourText.Concat(ArmorflavourText).ToList();
                                break;
                            case ("Weapon"):
                                flavourText = flavourText.Concat(WeaponflavourText).ToList();
                                break;
                            case ("Shield"):
                                flavourText = flavourText.Concat(ShieldflavourText).ToList();
                                break;
                            case ("Cooking"):
                                flavourText = flavourText.Concat(CookingflavourText).ToList();
                                break;
                            case ("Jewelry"):
                                flavourText = flavourText.Concat(JewelryflavourText).ToList();
                                break;
                        }

                        string frontPage =
                            $"<p align='center'>\n\n\n{objName} {schematicType}\n\n\n\n</p>\n[pagebreak]";
                        book.BookText =
                            $"{frontPage}\n<p align='left'>\nMaterials needed:\n{requiredItems}\n{flavourText[random.Next(flavourText.Count)]}";
                        ;

                        // Add book to dict
                        itemBOOK.Add(createdItem.FormKey, book.FormKey);

                        if (settings.ShowDebugLogs)
                        {
                            Console.WriteLine($"Created {book.Name}:");
                            Console.WriteLine("-----------------------");
                            Console.WriteLine(book.BookText);
                            Console.WriteLine("-----------------------");
                            Console.WriteLine(String.Empty);
                        }

                        // create a new book fragment
                        bookFragment = state.PatchMod.Books.AddNew(book.EditorID);
                        string? counter = "a couple";
                        switch (noteToSchematicRatio)
                        {
                            case (<= 6):
                                counter = "a small amount";
                                break;
                            case (<= 8):
                                counter = "a fair amount";
                                break;
                            case (<= 10):
                                counter = "a larger amount";
                                break;
                        }

                        // Set the fragment properties
                        bookFragment.EditorID = $"{objEditorID}_{schematicType}_Fragment";
                        bookFragment.Name = $"{schematicType} notes on {objName}";
                        bookFragment.Description =
                            $"Notes I made on the {processName}ing of {aAn} {objName}. Maybe if I collect {counter} of these I can then write up my own {schematicType.ToLower()}.";
                        bookFragment.Value = (uint)(
                            Math.Max(Math.Round(objValue / ((double)noteToSchematicRatio * 1.2)), 1)
                        );
                        bookFragment.Weight = 0.1f;
                        bookFragment.Model = bookFragmentModelLib[bookFragmentModelSetKey];
                        bookFragment.InventoryArt = new FormLinkNullable<IStaticGetter>(
                            bookFragmentStatic
                        );
                        bookFragment.ObjectBounds = bookFragmentStatic.ObjectBounds.DeepCopy();
                        bookFragment.PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>(
                            Skyrim.SoundDescriptor.ITMNoteUp.FormKey
                        );
                        bookFragment.BookText =
                            $"After breaking down {aAn} {objName} I feel like I've grown closer to understanding the process of {processName}ing it. I should study more of these if I want to be able to craft {aAn} {objName} of my own.";
                        ;
                        bookFragment.Type = Book.BookType.BookOrTome;
                        bookFragment.Keywords = new Noggog.ExtendedList<
                            IFormLinkGetter<IKeywordGetter>
                        >();
                        bookFragment.Keywords.Add(Skyrim.Keyword.VendorItemRecipe);

                        // Add book fragment to dict
                        itemBOOKFragment.Add(createdItem.FormKey, bookFragment.FormKey);

                        // Create COBJ item -> fragment
                        var itemToFragmentCOBJ = state.PatchMod.ConstructibleObjects.AddNew();

                        itemToFragmentCOBJ.EditorID = $"{objEditorID}_Breakdown_Recipe";
                        itemToFragmentCOBJ.CreatedObject =
                            new FormLinkNullable<IConstructibleGetter>(bookFragment.FormKey);

                        itemToFragmentCOBJ.Items = new Noggog.ExtendedList<ContainerEntry>();
                        itemToFragmentCOBJ.Items.Add(
                            new ContainerEntry()
                            {
                                Item = new ContainerItem()
                                {
                                    Item = new FormLink<IItemGetter>(createdItem.FormKey),
                                    Count = 1
                                },
                            }
                        );

                        itemToFragmentCOBJ.WorkbenchKeyword = new FormLinkNullable<IKeywordGetter>(
                            cobj.WorkbenchKeyword.FormKey
                        );
                        itemToFragmentCOBJ.CreatedObjectCount = (ushort?)
                            itemToFragmentCOBJ.Items.Count;

                        // Add conditions (so it doesn't clutter the menu)
                        var itemToFragmentCOBJCond = new GetItemCountConditionData()
                        {
                            RunOnType = Condition.RunOnType.Reference,
                            Reference = Skyrim.PlayerRef,
                        };
                        ;
                        itemToFragmentCOBJCond.ItemOrList = new FormLinkOrIndex<IItemOrListGetter>(
                            itemToFragmentCOBJCond,
                            createdItem.FormKey
                        );
                        itemToFragmentCOBJCond.ItemOrList.Link.SetTo(createdItemFormKey);

                        itemToFragmentCOBJ.Conditions.Add(
                            new ConditionFloat()
                            {
                                ComparisonValue = 1,
                                CompareOperator = CompareOperator.GreaterThanOrEqualTo,
                                Data = itemToFragmentCOBJCond,
                            }
                        );

                        // Create COBJ fragment -> book
                        var bookCOBJ = state.PatchMod.ConstructibleObjects.AddNew();

                        bookCOBJ.EditorID = $"{objEditorID}_{schematicType}_Recipe";
                        bookCOBJ.CreatedObject = new FormLinkNullable<IConstructibleGetter>(
                            book.FormKey
                        );

                        bookCOBJ.Items = new Noggog.ExtendedList<ContainerEntry>();
                        bookCOBJ.Items.Add(
                            new ContainerEntry()
                            {
                                Item = new ContainerItem()
                                {
                                    Item = new FormLink<IItemGetter>(bookFragment.FormKey),
                                    Count = (int)noteToSchematicRatio
                                },
                            }
                        );
                        bookCOBJ.WorkbenchKeyword = new FormLinkNullable<IKeywordGetter>(
                            cobj.WorkbenchKeyword.FormKey
                        );
                        bookCOBJ.CreatedObjectCount = (ushort?)bookCOBJ.Items.Count;

                        // Add conditions (so it doesn't clutter the menu)
                        var bookCOBJCond = new GetItemCountConditionData()
                        {
                            RunOnType = Condition.RunOnType.Reference,
                            Reference = Skyrim.PlayerRef,
                        };
                        ;
                        bookCOBJCond.ItemOrList = new FormLinkOrIndex<IItemOrListGetter>(
                            bookCOBJCond,
                            bookFragment.FormKey
                        );
                        bookCOBJCond.ItemOrList.Link.SetTo(bookFragment);

                        var bookCOBJCondItem = new ConditionFloat()
                        {
                            ComparisonValue = noteToSchematicRatio,
                            CompareOperator = CompareOperator.GreaterThanOrEqualTo,
                            Data = bookCOBJCond
                        };

                        bookCOBJ.Conditions.Add(bookCOBJCondItem);

                        if (settings.ShowDebugLogs)
                        {
                            Console.WriteLine($"Created {bookFragment.Name}:");
                            Console.WriteLine("-----------------------");
                            Console.WriteLine(bookFragment.BookText);
                            Console.WriteLine("-----------------------");
                            Console.WriteLine(String.Empty);
                        }
                    }
                    else
                    {
                        // Link to existing book
                        if (
                            !state.LinkCache.TryResolve<IBookGetter>(
                                itemBOOK[createdItemFormKey],
                                out var bookLink
                            )
                        )
                            continue;

                        if (bookLink is not Book BookLinkBook)
                            continue;

                        book = BookLinkBook;
                    }

                    // Create a new COBJ record with the modified conditions
                    var modifiedCobj = state.PatchMod.ConstructibleObjects.GetOrAddAsOverride(cobj);
                    var newCond = new GetItemCountConditionData()
                    {
                        RunOnType = Condition.RunOnType.Reference,
                        Reference = Skyrim.PlayerRef,
                    };
                    newCond.ItemOrList = new FormLinkOrIndex<IItemOrListGetter>(
                        newCond,
                        book.FormKey
                    );
                    newCond.ItemOrList.Link.SetTo(book);

                    modifiedCobj.Conditions.Add(
                        new ConditionFloat()
                        {
                            ComparisonValue = 1,
                            CompareOperator = CompareOperator.GreaterThanOrEqualTo,
                            Data = newCond,
                            Flags = Condition.Flag.OR
                        }
                    );

                    if (settings.ShowDebugLogs)
                        Console.WriteLine($"    Patched {cobj.EditorID} with {book.EditorID}");

                    // Blacksmith tutorial workaround

                    if (
                        cobj.FormKey == Skyrim.ConstructibleObject.RecipeWeaponIronDagger.FormKey
                        || cobj.FormKey == Skyrim.ConstructibleObject.RecipeLeatherDeerHide.FormKey
                        || cobj.FormKey == Skyrim.ConstructibleObject.RecipeArmorHideHelmet.FormKey
                    )
                    {
                        var SmithTutorialDagger = new GetStageConditionData();
                        SmithTutorialDagger.Quest = new FormLinkOrIndex<IQuestGetter>(
                            SmithTutorialDagger,
                            Skyrim.Quest.TutorialBlacksmithing.FormKey
                        );
                        SmithTutorialDagger.Quest.Link.SetTo(
                            Skyrim.Quest.TutorialBlacksmithing.FormKey
                        );
                        var conditionBase = new ConditionFloat()
                        {
                            ComparisonValue = 10,
                            CompareOperator = CompareOperator.GreaterThanOrEqualTo,
                            Data = SmithTutorialDagger
                        };

                        if (
                            cobj.FormKey
                            == Skyrim.ConstructibleObject.RecipeWeaponIronDagger.FormKey
                        )
                        {
                            conditionBase.ComparisonValue = 10;
                        }
                        else if (
                            cobj.FormKey == Skyrim.ConstructibleObject.RecipeLeatherDeerHide.FormKey
                        )
                        {
                            conditionBase.ComparisonValue = 50;
                        }
                        else if (
                            cobj.FormKey == Skyrim.ConstructibleObject.RecipeArmorHideHelmet.FormKey
                        )
                        {
                            conditionBase.ComparisonValue = 70;
                        }

                        modifiedCobj.Conditions.Add(conditionBase);
                    }
                }

                if (settings.ShowDebugLogs)
                    Console.WriteLine($"Patching LVLIs to include new schematics ...");

                foreach (FormKey lvliFormKey in itemLVLIs[createdItemFormKey])
                {
                    // Define LVLI and check if it's empty
                    if (
                        !state.LinkCache.TryResolve<ILeveledItemGetter>(
                            lvliFormKey,
                            out var leveledList
                        )
                        && leveledList?.Entries == null
                    )
                        continue;

                    // Define the LVLI to be made specifically for the schematic
                    LeveledItem schematicLVLI;

                    // basic book entry to be added to schematicLVLI
                    LeveledItemEntry bookEntry = new LeveledItemEntry()
                    {
                        Data = new LeveledItemEntryData()
                        {
                            Reference = new FormLink<IItemGetter>(itemBOOK[createdItemFormKey]),
                            Level = 1,
                            Count = 1
                        }
                    };

                    string leveledItemIDTemplate = $"{objEditorID}_{schematicType}";

                    if (!bookLVLIs.ContainsKey(itemBOOK[createdItemFormKey]))
                        bookLVLIs.Add(
                            itemBOOK[createdItemFormKey],
                            new Dictionary<String, FormKey>()
                        );

                    if (!bookLVLIs[itemBOOK[createdItemFormKey]].ContainsKey(leveledItemIDTemplate))
                    {
                        // Create leveled list for each item with a user customizable drop chance
                        schematicLVLI = state.PatchMod.LeveledItems.AddNew();
                        schematicLVLI.ChanceNone = (byte)(100 - settings.DropChance);
                        schematicLVLI.EditorID = leveledItemIDTemplate;
                        schematicLVLI.Entries = new Noggog.ExtendedList<LeveledItemEntry>();
                        schematicLVLI.Entries.Add(bookEntry);
                        bookLVLIs[itemBOOK[createdItemFormKey]].Add(
                            schematicLVLI.EditorID,
                            schematicLVLI.FormKey
                        );
                    }
                    else
                    {
                        // Link to existing book
                        if (
                            !state.LinkCache.TryResolve<ILeveledItemGetter>(
                                bookLVLIs[itemBOOK[createdItemFormKey]][leveledItemIDTemplate],
                                out var schematicLVLILink
                            )
                        )
                            continue;

                        if (schematicLVLILink is not LeveledItem schematicLVLILinkLVLI)
                            continue;

                        schematicLVLI = schematicLVLILinkLVLI;
                    }

                    if (settings.ShowDebugLogs)
                    {
                        Console.WriteLine(String.Empty);
                        Console.WriteLine(
                            $"    Injecting {schematicLVLI.EditorID} in {leveledList.EditorID}"
                        );
                    }

                    for (int i = 0; i < leveledList.Entries?.Count; i++)
                    {
                        var existingEntry = leveledList.Entries[i];
                        if (existingEntry.Data?.Reference.FormKey != createdItem.FormKey)
                            continue;

                        // Get the level of the existing entry
                        short existingLevel = existingEntry?.Data?.Level ?? 1;

                        // Create a new entry with the new item and the same level
                        LeveledItemEntry newEntry = new LeveledItemEntry()
                        {
                            Data = new LeveledItemEntryData()
                            {
                                Reference = new FormLink<IItemGetter>(schematicLVLI),
                                Level = existingLevel,
                                Count = 1
                            }
                        };

                        LeveledItem modifiedBaseLVLI =
                            state.PatchMod.LeveledItems.GetOrAddAsOverride(leveledList);

                        // Add the new entry to the leveled list
                        if (modifiedBaseLVLI.Entries == null)
                            modifiedBaseLVLI.Entries = new Noggog.ExtendedList<LeveledItemEntry>();
                        modifiedBaseLVLI.Entries.Add(newEntry);

                        if (settings.ShowDebugLogs)
                            Console.WriteLine($"        Injected at level {existingLevel};");
                    }
                }

                // Temporary "fix" for hitting the LVLI entry cap

                var overflownFormkeys = new Dictionary<FormKey, List<FormKey>>();

                foreach (var lvliFormKey in itemLVLIs[createdItemFormKey])
                {
                    // Define LVLI and check if it's empty
                    if (
                        !state.LinkCache.TryResolve<ILeveledItemGetter>(
                            lvliFormKey,
                            out var leveledList
                        )
                    )
                        continue;

                    if (leveledList.Entries?.Count >= 254)
                    {
                        if (!overflownFormkeys.ContainsKey(createdItemFormKey))
                            overflownFormkeys.Add(createdItemFormKey, new List<FormKey>());
                        overflownFormkeys[createdItemFormKey].Add(leveledList.FormKey);
                    }
                }

                if (!overflownFormkeys.ContainsKey(createdItemFormKey))
                    continue;

                Console.WriteLine(String.Empty);
                Console.WriteLine($"oopsie doopsie uwu too many items in this leveled list");

                if (
                    overflownFormkeys[createdItemFormKey].Count
                    == itemLVLIs[createdItemFormKey].Count
                )
                {
                    // Define LVLI and check if it's empty
                    if (
                        !state.LinkCache.TryResolve<ILeveledItemGetter>(
                            overflownFormkeys[createdItemFormKey][0],
                            out var leveledList
                        )
                    )
                        continue;

                    foreach (var lvliFormKey in bookLVLIs[itemBOOK[createdItemFormKey]])
                    {
                        // Define LVLI and check if it's empty
                        if (
                            !state.LinkCache.TryResolve<ILeveledItemGetter>(
                                lvliFormKey.Value,
                                out var lvli
                            )
                        )
                            continue;
                        state.PatchMod.LeveledItems.Remove(lvli);
                    }

                    state.PatchMod.Books.Remove(itemBOOK[createdItem.FormKey]);
                    state.PatchMod.Books.Remove(itemBOOKFragment[createdItem.FormKey]);

                    // Delete cobj condition changes, book and book fragment cobjs
                    foreach (var cobj in state.PatchMod.ConstructibleObjects)
                    {
                        if (
                            itemCOBJs[createdItemFormKey].Any(e => e == cobj.FormKey)
                            || cobj.CreatedObject.FormKey == itemBOOK[createdItem.FormKey]
                            || cobj.CreatedObject.FormKey == itemBOOKFragment[createdItem.FormKey]
                        )
                        {
                            state.PatchMod.ConstructibleObjects.Remove(cobj);
                        }
                    }

                    // delete schematic
                    state.PatchMod.LeveledItems.Remove(leveledList);
                    Console.WriteLine($"undoing all the modifications made from this item");
                }
                else
                {
                    foreach (var lvliFormKey in overflownFormkeys[createdItemFormKey])
                    {
                        state.PatchMod.LeveledItems.Remove(lvliFormKey);
                        Console.WriteLine(
                            $"undoing just the funky wunky lvli and keeping the rest"
                        );
                    }
                }
            }

            Console.WriteLine(String.Empty);
            Console.WriteLine("=================================================");
        }
    }
}
